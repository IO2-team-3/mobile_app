// Mocks generated by Mockito 5.3.2 from annotations
// in mobile_app/test/views/events_browsing/events_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:built_collection/built_collection.dart' as _i6;
import 'package:dio/dio.dart' as _i3;
import 'package:mobile_app/providers/api_provider.dart' as _i2;
import 'package:mobile_app/providers/events_cache_provider.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:openapi/openapi.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAPIProvider_0 extends _i1.SmartFake implements _i2.APIProvider {
  _FakeAPIProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1<T> extends _i1.SmartFake implements _i3.Response<T> {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EventsCacheProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventsCacheProvider extends _i1.Mock
    implements _i4.EventsCacheProvider {
  MockEventsCacheProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.APIProvider get apiProvider => (super.noSuchMethod(
        Invocation.getter(#apiProvider),
        returnValue: _FakeAPIProvider_0(
          this,
          Invocation.getter(#apiProvider),
        ),
      ) as _i2.APIProvider);
  @override
  set apiProvider(_i2.APIProvider? _apiProvider) => super.noSuchMethod(
        Invocation.setter(
          #apiProvider,
          _apiProvider,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i5.Future<void> refreshAllEvents(bool? notifyListeners) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshAllEvents,
          [notifyListeners],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i3.Response<_i6.BuiltList<_i7.Event>>> getAllEvents(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllEvents,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i5.Future<_i3.Response<_i6.BuiltList<_i7.Event>>>.value(
            _FakeResponse_1<_i6.BuiltList<_i7.Event>>(
          this,
          Invocation.method(
            #getAllEvents,
            [],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i5.Future<_i3.Response<_i6.BuiltList<_i7.Event>>>);
  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

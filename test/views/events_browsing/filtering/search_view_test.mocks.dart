// Mocks generated by Mockito 5.3.2 from annotations
// in mobile_app/test/views/events_browsing/filtering/search_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:collection' as _i2;
import 'dart:ui' as _i6;

import 'package:geocoding/geocoding.dart' as _i5;
import 'package:mobile_app/providers/search_query_provider.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:openapi/openapi.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUnmodifiableListView_0<E> extends _i1.SmartFake
    implements _i2.UnmodifiableListView<E> {
  _FakeUnmodifiableListView_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchQueryProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchQueryProvider extends _i1.Mock
    implements _i3.SearchQueryProvider {
  MockSearchQueryProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UnmodifiableListView<_i4.Category> get categories => (super.noSuchMethod(
        Invocation.getter(#categories),
        returnValue: _FakeUnmodifiableListView_0<_i4.Category>(
          this,
          Invocation.getter(#categories),
        ),
      ) as _i2.UnmodifiableListView<_i4.Category>);
  @override
  String get eventName => (super.noSuchMethod(
        Invocation.getter(#eventName),
        returnValue: '',
      ) as String);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void addCategory(_i4.Category? category) => super.noSuchMethod(
        Invocation.method(
          #addCategory,
          [category],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeCategory(_i4.Category? category) => super.noSuchMethod(
        Invocation.method(
          #removeCategory,
          [category],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeAllCategories() => super.noSuchMethod(
        Invocation.method(
          #removeAllCategories,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setEventName(String? eventName) => super.noSuchMethod(
        Invocation.method(
          #setEventName,
          [eventName],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetEventName() => super.noSuchMethod(
        Invocation.method(
          #resetEventName,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCurrentLocation(_i5.Location? location) => super.noSuchMethod(
        Invocation.method(
          #setCurrentLocation,
          [location],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setDistance(double? dist) => super.noSuchMethod(
        Invocation.method(
          #setDistance,
          [dist],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetLocationQuery() => super.noSuchMethod(
        Invocation.method(
          #resetLocationQuery,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetSearchQuery() => super.noSuchMethod(
        Invocation.method(
          #resetSearchQuery,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
